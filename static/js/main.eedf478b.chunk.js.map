{"version":3,"sources":["TaxForm/Input.js","saveReusableData.js","TaxForm/index.js","Preview/index.js","useMedia.js","generator.js","App.js","index.js"],"names":["TaxFormInput","_ref","field","_ref$form","form","touched","errors","props","Object","objectWithoutProperties","react_default","a","createElement","className","TextInputField","assign","marginBottom","type","validationMessage","get","name","getReusableData","fullName","localStorage","getItem","address","personalNumber","initialState","objectSpread2","transactions","date","amount","undefined","messages","concat","Schema","Yup","shape","min","required","length","of","TaxForm","onSubmit","formik_esm","initialValues","values","actions","setItem","setReusableData","setSubmitting","validationSchema","render","_ref2","status","isSubmitting","isValid","label","component","placeholder","arrayHelpers","Pane","Paragraph","size","map","transaction","index","key","borderLeft","paddingLeft","paddingBottom","Button","appearance","intent","iconBefore","onClick","remove","push","msg","disabled","MarkdownPreview","md","with_html_default","source","escapeHtml","skipHtml","useMedia","queries","defaultValue","mediaQueryLists","q","window","matchMedia","getValue","useCallback","findIndex","mql","matches","_useState","useState","_useState2","slicedToArray","value","setValue","useEffect","handler","forEach","addListener","removeListener","dividendTax","x","input","val","generate","allDivident","reduce","acc","allDividentTax","allDividentPlusTaxSum","transactionOverviewStr","trim","join","transactionsDeclarationStepsStr","_ref3","split","App","setMd","_useMedia","_useMedia2","col1","col2","overflow","flexWrap","background","height","width","display","flex","maxHeight","padding","src_TaxForm","generateStepsMD","Preview","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.eedf478b.chunk.js","sourcesContent":["import React from 'react'\nimport { TextInputField } from 'evergreen-ui'\nimport get from 'lodash.get'\n\nconst TaxFormInput = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div className=\"Input-wrapper\">\n    <TextInputField\n      marginBottom=\"15px\"\n      type=\"text\"\n      {...field}\n      {...props}\n      validationMessage={get(touched, field.name) && get(errors, field.name)}\n    />\n  </div>\n)\n\nexport default TaxFormInput\n","function setReusableData({ fullName, address, personalNumber }) {\n  if (getReusableData().fullName) return\n\n  localStorage.setItem('fullName', fullName)\n  localStorage.setItem('address', address)\n  localStorage.setItem('personalNumber', personalNumber)\n}\n\nfunction getReusableData() {\n  return {\n    fullName: localStorage.getItem('fullName') || '',\n    address: localStorage.getItem('address') || '',\n    personalNumber: localStorage.getItem('personalNumber') || '',\n  }\n}\n\nfunction clearReusableData() {\n  localStorage.clear()\n}\n\nexport { getReusableData, setReusableData, clearReusableData }\n","import React from 'react'\nimport { Formik, Field, FieldArray, Form } from 'formik'\nimport * as Yup from 'yup'\nimport { Button, Pane, Paragraph } from 'evergreen-ui'\n\nimport TaxFormInput from './Input'\nimport { getReusableData, setReusableData } from '../saveReusableData'\n\nconst initialState = {\n  ...getReusableData(),\n  transactions: [\n    {\n      date: '',\n      amount: undefined,\n    },\n  ],\n}\n\nconst messages = {\n  required: () => 'აუცილებელი ველი',\n  short: field => `${field} ძალიან მოკლეა`,\n  invalid: field => `არასწორი ${field}`,\n}\n\nconst Schema = Yup.object().shape({\n  fullName: Yup.string()\n    .min(2, messages.short('სახელი'))\n    .required(messages.required()),\n  address: Yup.string()\n    .min(2, messages.short('მისამართი'))\n    .required(messages.required()),\n  personalNumber: Yup.string()\n    .length(11, messages.invalid('პირადი ნომერი'))\n    .required(messages.required()),\n  transactions: Yup.array().of(\n    Yup.object().shape({\n      date: Yup.string()\n        .min(10, 'თარიღი უნდა იყოს DD/MM/YYYY ფორმატში')\n        .required(messages.required()),\n      amount: Yup.number().required(messages.required()),\n    }),\n  ),\n})\n\nconst TaxForm = ({ onSubmit }) => {\n  return (\n    <div>\n      <Formik\n        initialValues={initialState}\n        onSubmit={(values, actions) => {\n          setReusableData(values)\n          onSubmit(values)\n          actions.setSubmitting(false)\n        }}\n        validationSchema={Schema}\n        render={({ errors, status, touched, isSubmitting, isValid, values }) => (\n          <Form>\n            <Field\n              type=\"text\"\n              name=\"fullName\"\n              label=\"სრული სახელი\"\n              component={TaxFormInput}\n              placeholder=\"მაგ. გიორგი მაისურაძე\"\n              required\n            />\n\n            <Field\n              type=\"text\"\n              name=\"address\"\n              label=\"მისამართი\"\n              component={TaxFormInput}\n              placeholder=\"მაგ. რუსთაველის გამზ. 26\"\n              required\n            />\n\n            <Field\n              type=\"text\"\n              name=\"personalNumber\"\n              label=\"პირადი ნომერი\"\n              component={TaxFormInput}\n              placeholder=\"მაგ. 01101899998\"\n              required\n            />\n\n            <FieldArray\n              name=\"transactions\"\n              render={arrayHelpers => (\n                <Pane>\n                  <Paragraph size={500} marginBottom=\"15px\">\n                    ტრანზაქციები\n                  </Paragraph>\n\n                  {values.transactions &&\n                    values.transactions.length > 0 &&\n                    values.transactions.map((transaction, index) => (\n                      <Pane\n                        key={index}\n                        borderLeft\n                        paddingLeft=\"15px\"\n                        paddingBottom=\"15px\"\n                        marginBottom=\"15px\"\n                      >\n                        <Paragraph size={300} marginBottom=\"15px\">\n                          ტრანზაქცია #{index + 1}\n                        </Paragraph>\n\n                        <Field\n                          type=\"string\"\n                          name={`transactions.${index}.date`}\n                          label=\"თარიღი\"\n                          component={TaxFormInput}\n                          placeholder=\"მაგ. 02/03/2019\"\n                          required\n                        />\n                        <Field\n                          type=\"number\"\n                          name={`transactions.${index}.amount`}\n                          label=\"დივიდენდის რაოდენობა\"\n                          component={TaxFormInput}\n                          placeholder=\"მაგ. 10000\"\n                          required\n                        />\n\n                        {values.transactions.length > 1 && (\n                          <Button\n                            type=\"button\"\n                            appearance=\"primary\"\n                            intent=\"danger\"\n                            iconBefore=\"remove\"\n                            onClick={() => arrayHelpers.remove(index)}\n                          >\n                            ტრანზაქციის წაშლა\n                          </Button>\n                        )}\n                      </Pane>\n                    ))}\n                  <Button\n                    type=\"button\"\n                    appearance=\"primary\"\n                    intent=\"success\"\n                    iconBefore=\"add\"\n                    onClick={() => arrayHelpers.push('')}\n                  >\n                    ტრანზაქციის დამატება\n                  </Button>\n                </Pane>\n              )}\n            />\n\n            <br />\n            {status && status.msg && <div>{status.msg}</div>}\n            <Button appearance=\"primary\" type=\"submit\" disabled={isSubmitting || !isValid}>\n              ინსტრუქციების დაგენერირება\n            </Button>\n          </Form>\n        )}\n      />\n    </div>\n  )\n}\n\nexport default TaxForm\n","import React from 'react'\nimport ReactMarkdown from 'react-markdown/with-html'\n\nconst MarkdownPreview = ({ md }) => {\n  return <ReactMarkdown source={md} escapeHtml={false} skipHtml={false} />\n}\n\nexport default MarkdownPreview\n","import { useCallback, useState, useEffect } from 'react'\n// https://usehooks.com/useMedia/\nfunction useMedia(queries, values, defaultValue) {\n  // Array containing a media query list for each query\n  const mediaQueryLists = queries.map(q => window.matchMedia(q))\n\n  // Function that gets value based on matching media query\n  const getValue = useCallback(() => {\n    // Get index of first media query that matches\n    const index = mediaQueryLists.findIndex(mql => mql.matches)\n    // Return related value or defaultValue if none\n    return typeof values[index] !== 'undefined' ? values[index] : defaultValue\n  })\n\n  // State and setter for matched value\n  const [value, setValue] = useState(getValue)\n\n  useEffect(\n    () => {\n      // Event listener callback\n      // Note: By defining getValue outside of useEffect we ensure that it has ...\n      // ... current values of hook args (as this hook callback is created once on mount).\n      const handler = () => setValue(getValue)\n      // Set a listener for each media query with above handler as callback.\n      mediaQueryLists.forEach(mql => mql.addListener(handler))\n      // Remove listeners on cleanup\n      return () => mediaQueryLists.forEach(mql => mql.removeListener(handler))\n    },\n    [getValue, mediaQueryLists], // Empty array ensures effect is only run on mount and unmount\n  )\n\n  return value\n}\n\nexport default useMedia\n","const dividendTax = x => (x / 95) * 5\nconst input = val => `<input value=\"${val}\"/>`\nconst generate = function({ fullName, address, personalNumber, transactions }) {\n  const allDivident = transactions.reduce((acc, x) => acc + x.amount, 0)\n  const allDividentTax = dividendTax(allDivident)\n  const allDividentPlusTaxSum = allDivident + allDividentTax\n  const transactionOverviewStr = transactions\n    .map(({ amount, date }) =>\n      `\n1. ${date} - ${amount + dividendTax(amount)} ლარიდან, ${amount} არის დივიდენდი, ხოლო ${dividendTax(\n        amount,\n      )} გადასახადი.\n`.trim(),\n    )\n    .join('\\n')\n  const transactionsDeclarationStepsStr = transactions\n    .map(({ amount, date }) =>\n      `\n1. ველში **განაცემის მიმღების საიდენტ. ნომერი** ჩაწერე ${input(personalNumber)}\n1. ველში **სახელი** ჩაწერე ${input(fullName.split(' ')[0])}\n1. ველში **გვარი** ჩაწერე ${input(fullName.split(' ')[1])}\n1. ველში **მისამართი** ჩაწერე **${input(address)}**\n1. ველში **პირის რეზიდენტობა (ქვეყანა)** ჩაწერე **${input('საქართველო')}**\n1. ველში **შემოსავლის მიმღებ პირთა კატეგორია** აირჩიე **${input(1.4)}: სხვა ფიზიკური პირები**\n1. ველში **განაცემის სახე** აირჩიე **${input('დივიდენდი')}**\n1. ველში **განაცემის თანხა(ლარი)** ჩაწერე **${input(amount + dividendTax(amount))}**\n1. ველში **შეღავათის ოდენობა** ჩაწერე **${input(0)}**\n1. ველში **გაცემის თარიღი** შეიყვანე თარიღი **${input(date)}**\n1. ველში **წყაროსთან დასაკავებელი გადასახადის განაკვეთი** აირჩიე **${input(5)}**\n1. ველში **დაკავებული გადასახადი (ლარი)** ჩაწერე **${input(allDividentTax)}**\n1. დააჭირე ღილასკს დამატება, იკონით **+**\n`.trim(),\n    )\n    .join('\\n')\n  return `\n# მიმოხილვა\nტრანზაქციები რომლის დეკლარირებასაც ვახდენთ:\n\n${transactionOverviewStr}\n\n# დეკლარაციის შევსება\n1. გადადი გვერდზე eservices.rs.ge და გაიარე ავტორიზებას\n1. გადადი გვერდზე __დეკლარაციები__\n\n## მოგება\n1. გადადი გვერდზე **ყოველთვიური > მოგების გადასახადი**\n1. დაკლიკე ღილაკზე **ახალი დეკლარაცია**\n1. ველში **ეკონომიკური საქმიანობის (NACE) კოდი სრულად** შეიყვანე **${input(\n    62020,\n  )} (საკონსულტაციო საქმიანობები კომპიუტერული ტექნოლოგიების დარგში)** (მხოლოდ რიცხვის აკრეფა საკმარისია) \n1. **რეზიდენტი საწარმო** მონიშული დატოვე\n1. დააკლიკე დამატების ღილაკს, იკონით **+**\n1. ზემოთ დააჭირე ღილაკს **2** რათა გადახვიდე მეორე გვერდზე\n1. ველში **16.1 განაწილებული დივიდენდი, მათ შორის** ჩაწერე **${input(allDividentPlusTaxSum)}**\n1. ველში **22. მოგების გადასახადისგან გათავისუფლებული მოგების განაწილება, გაწეული ხარჯი, განხორციელებული განაცემი** ჩაწერე **${input(\n    allDividentPlusTaxSum,\n  )}**\n1. დასქროლე გვერდის ბოლოშ და დააჭირე ღილაკს **შენახვა**\n1. ასქროლე სულ ზემოთ და დააჭირე გათიშვის ღილაკს იკონით **x**\n\n##  განაცემთა ინფორმაცია\n1. გადადი გვერდზე **ყოველთვიური > ინფორმაცია განაცემებისა და დაკავებული გადასახადის შესახებ**\n1. დაკლიკე ღილაკზე **ახალი დეკლარაცია**\n1. ველში **თანხის მიმღების დასახელება** ჩაწერე **${input(fullName)}**\n1. ველში **მისამართი** ჩაწერე **${input(address)}**\n1. ველში **საიდენტიფიკაციო ნომერი (პირადი ნომერი)** ჩაწერე **${input(personalNumber)}**\n1. ველში **პირის რეზიდენტობა (ქვეყანა)** ჩაწერე **${input('საქართველო')}**\n1. ველში **განაცემი > სახე** აირჩიე **${input('დივიდენდი')}**\n1. ველში **განაცემი > თანხა (ლარი)**  ჩაწერე **${input(allDividentPlusTaxSum)}**\n1. ველში **დაკავებული გადასახადი (ლარი)** ჩაწერე **${input(allDividentTax)}**\n1. ველში **საერთაშორისო ხელშეკრულების საფუძველზე გათავისუფლებას დაქვემდებარებული გადასახადის თანხა (ლარი)** ჩაწერე **${input(\n    0,\n  )}**\n1. დააკლიკე დამატების ღილაკს, იკონით **+**\n1. დასქროლე გვერდის ბოლოში და დააჭირე ღილაკს **შენახვა**\n1. ასქროლე სულ ზემოთ და დააჭირე გათიშვის ღილაკს იკონით **x**\n\n## საშემოსავლო\n1. გადავდივართ გვერდზე **ყოველთვიური > საშემოსავლო (გადახდის წყაროსთან დაკავებული გადასახადი)**\n1. დაკლიკე ღილაკზე **ახალი დეკლარაცია**\n1. **გადამხდელის ტიპი** აირჩიე **სხვა**\n1. ველში **ეკონომიკური საქმიანობის (NACE) კოდი სრულად** შეიყვანე **${input(\n    62020,\n  )} (საკონსულტაციო საქმიანობები კომპიუტერული ტექნოლოგიების დარგში)** (მხოლოდ რიცხვის აკრეფა საკმარისია) \n1. დააკლიკე დამატების ღილაკს, იკონით **+**\n1. ზემოთ დააჭირე ღილაკს **2** რათა გადახვიდე მეორე გვერდზე\n${transactionsDeclarationStepsStr}\n1. დასქროლე გვერდის ბოლოში და დააჭირე ღილაკს **შენახვა**\n1. ასქროლე სულ ზემოთ და დააჭირე გათიშვის ღილაკს იკონით **x**\n\n# დეკლარაციების წარდგენა\n1. გადავდივარ გვერდზე **სტატისტიკა > გადასაგზავნი დეკლარაციები**\n1. შედიხარ ყველა დელკარაციაში\n1. აკლიკავ **შემდეგს** მანამ სანამ არ გამოჩნდება ღილაკი **გადაგზავნა**\n1. აკლიკავ ღილაკს **გადაგზავნა**`\n}\n\nexport default generate\n","import React, { useState } from 'react'\nimport { Pane } from 'evergreen-ui'\n\nimport TaxForm from './TaxForm'\nimport Preview from './Preview'\nimport useMedia from './useMedia'\nimport generateStepsMD from './generator'\n\nfunction App() {\n  const [md, setMd] = useState(`### ინსტრუქციები გამოჩნდება აქ მას შემდეგ რაც ფორმას შეავსებთ`)\n  const [col1, col2, overflow, flexWrap] = useMedia(\n    ['(max-width: 768px)'],\n    [['100%', '100%', 'auto', 'wrap']],\n    ['40%', '60%', 'hidden', 'nowrap'],\n  )\n  return (\n    <Pane\n      className=\"App\"\n      background=\"tint2\"\n      overflow={overflow}\n      height=\"100vh\"\n      width=\"100vw\"\n      display=\"flex\"\n      flexWrap={flexWrap}\n    >\n      <Pane flex={`0 0 ${col1}`} maxHeight=\"100%\" padding=\"15px\" overflow=\"auto\">\n        <TaxForm onSubmit={values => setMd(generateStepsMD(values))} />\n      </Pane>\n      <Pane borderLeft flex={`0 0 ${col2}`} padding=\"15px\" overflow=\"auto\">\n        <Preview md={md} />\n      </Pane>\n    </Pane>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}